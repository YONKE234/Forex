```
// Import necessary libraries
import java.util.ArrayList;
import java.util.List;

// Define constants
int OB_PERIOD = 15; // Order Block period
int BB_PERIOD = 7; // Breaker Block period
int CSM_PERIOD = 5; // Currency Strength Momentum period
double ENTRY_THRESHOLD = 55; // Entry threshold for CSM
double STOP_LOSS = 3; // Stop loss in pips
double TAKE_PROFIT = 6; // Take profit in pips

// Define classes for Order Block, Breaker Block, and Currency Strength Momentum
class OrderBlock {
    boolean isBullish;
    double price;
}

class BreakerBlock {
    boolean isBullish;
    double price;
}

class CurrencyStrengthMomentum {
    double value;
}

// Function to calculate Order Block
OrderBlock calculateOB(List<Double> prices) {
    // Implement Order Block calculation logic here
    OrderBlock ob = new OrderBlock();
    // ...
    return ob;
}

// Function to calculate Breaker Block
BreakerBlock calculateBB(List<Double> prices) {
    // Implement Breaker Block calculation logic here
    BreakerBlock bb = new BreakerBlock();
    // ...
    return bb;
}

// Function to calculate Currency Strength Momentum
CurrencyStrengthMomentum calculateCSM(List<Double> prices) {
    // Implement Currency Strength Momentum calculation logic here
    CurrencyStrengthMomentum csm = new CurrencyStrengthMomentum();
    // ...
    return csm;
}

// Main algorithm function
void runAlgorithm(List<Double> prices) {
    OrderBlock ob = calculateOB(prices);
    BreakerBlock bb = calculateBB(prices);
    CurrencyStrengthMomentum csm = calculateCSM(prices);

    // Check for buy signal
    if (ob.isBullish && bb.isBullish && csm.value > ENTRY_THRESHOLD) {
        // Enter long position
        System.out.println("Buy signal!");
    }

    // Check for sell signal
    if (!ob.isBullish && !bb.isBullish && csm.value < ENTRY_THRESHOLD) {
        // Enter short position
        System.out.println("Sell signal!");
    }
}

// Example usage
public static void main(String[] args) {
    List<Double> prices = new ArrayList<>();
    // Add price data to the list
    runAlgorithm(prices);
}
```
